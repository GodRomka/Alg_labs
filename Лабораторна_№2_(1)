#include <stdio.h>
#include <stdlib.h>

void rearrange_array(int A[], int N) {
    // Задаємо Ax як перший елемент масиву
    int Ax = A[0];
    // Ініціалізуємо вказівник на динамічний масив як NULL
    int* new_dynamic_arr = NULL;
    // Ініціалізуємо лічильник динамічного масиву як 0
    int dynamic_count = 0;

    // Проходимо по масиву, починаючи з другого елементу
    for (int i = 1; i < N; i++) {
        // Якщо поточний елемент більше або дорівнює Ax
        if (A[i] >= Ax) {
            // Збільшуємо лічильник динамічного масиву
            dynamic_count++;
            // Виділяємо пам'ять для нового динамічного елементу
            new_dynamic_arr = (int*)realloc(new_dynamic_arr, dynamic_count * sizeof(int));
            // Записуємо поточний елемент у новий динамічний масив
            new_dynamic_arr[dynamic_count - 1] = A[i];
        }
    }

    // Виводимо кількість елементів у динамічному масиві
    printf("Кількість елементів динамічного масиву: %d\n", dynamic_count);

    // Виводимо динамічний масив
    printf("Динамічний масив: ");
    for (int i = 0; i < dynamic_count; i++) {
        printf("%d ", new_dynamic_arr[i]);
    }
    printf("\n");

    // Звільняємо виділену пам'ять для динамічного масиву
    free(new_dynamic_arr);
}

int main() {
    // Оголошуємо та ініціалізуємо вихідний масив
    int A[] = {5, -3, -2, 0, 2, 7, 9, 10, 13};
    // Визначаємо розмір вихідного масиву
    int N = sizeof(A) / sizeof(A[0]);

    // Викликаємо функцію для обробки масиву
    rearrange_array(A, N);

    return 0;
}
